I have created the following plan after thorough exploration and analysis of the codebase. Follow the below plan verbatim. Trust the files and references. Do not re-verify what's written in the plan. Explore only when absolutely necessary. First implement all the proposed file changes and then I'll review all the changes together at the end.

### Observations

I analyzed the current HealthOverview component structure and found that it's a client component receiving data as props from HealthOverviewWrapper (a server component). The HealthOverview component contains multiple sub-components, extensive behavior tracking logic, and complex layout management. The existing useBehaviorTracking hook is already well-structured for general behavior tracking, but the HealthOverview component has specific tracking patterns that can be extracted into a dedicated hook.

### Approach

I'll decompose the HealthOverview component following the container/presentation pattern by:

1. **Creating HealthOverviewContainer.tsx** - Extract data fetching logic from HealthOverviewWrapper and make it a client component that manages state and data fetching
2. **Creating HealthOverviewLayout.tsx** - Extract the presentation logic from HealthOverview, focusing purely on layout and rendering
3. **Creating useHealthOverviewTracking.ts** - Extract health-specific behavior tracking logic into a custom hook that wraps useBehaviorTracking
4. **Maintaining identical output** - Ensure the new component structure renders exactly the same UI and maintains all existing functionality

The approach maintains the existing data flow while improving separation of concerns and reusability.

### Reasoning

I explored the repository structure and identified the current HealthOverview component and its usage patterns. I read the existing HealthOverview.tsx file to understand its structure, the HealthOverviewWrapper.tsx to see how data is fetched and passed, and the useBehaviorTracking.ts hook to understand the current tracking implementation. I also reviewed the health-overview-decomposition.md documentation to understand the intended decomposition approach.

## Mermaid Diagram

sequenceDiagram
    participant User
    participant Container as HealthOverviewContainer
    participant Layout as HealthOverviewLayout
    participant Hook as useHealthOverviewTracking
    participant API as Health APIs
    participant Tracking as useBehaviorTracking

    User->>Container: Load Health Overview
    Container->>API: Fetch recent records
    Container->>API: Fetch active goals
    Container->>API: Fetch health stats
    API-->>Container: Return health data
    Container->>Layout: Pass data as props
    Layout->>Hook: Initialize tracking
    Hook->>Tracking: Setup behavior tracking
    Layout-->>User: Render health overview UI
    
    User->>Layout: Interact with stat card
    Layout->>Hook: Track stat card view
    Hook->>Tracking: Send tracking event
    
    User->>Layout: View goal progress
    Layout->>Hook: Track goal progress view
    Hook->>Tracking: Send tracking event
    
    User->>Layout: Click quick action
    Layout->>Hook: Track quick action click
    Hook->>Tracking: Send tracking event

## Proposed File Changes

These two files are already created:
src/components/health/HealthOverviewContainer.tsx
src/components/health/HealthOverviewLayout.tsx

Only do this one following file change.
### src/components/health/useHealthOverviewTracking.ts(NEW)

References: 

- src/hooks/useBehaviorTracking.ts
- src/components/health/HealthOverview.tsx

Create a custom hook that encapsulates health overview specific behavior tracking logic. This hook will:

- Import and use the existing `useBehaviorTracking.ts` hook as the foundation
- Extract all the specific tracking functions from `HealthOverview.tsx`:
  - `handleStatCardView` for tracking stat card interactions
  - `handleGoalProgressView` for tracking goal progress card views
  - `handleRecordView` for tracking health record item views
  - `handleQuickActionClick` for tracking quick action button clicks
  - `handleMiniChartView` for tracking mini chart interactions
  - `trackOverviewView` for tracking overall health overview views
- Provide a clean API with specific methods for each type of health overview interaction
- Maintain the same event structure and context data as the original implementation
- Use useCallback for performance optimization
- Accept parameters needed for tracking (like goal data, record data, chart types)
- Return an object with all the tracking functions that components can use
- Ensure all tracking events maintain the same eventName, entityType, and context structure as the original

This hook will centralize all health overview tracking logic and make it reusable across the decomposed components.
