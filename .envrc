# .envrc
use flake

# Create proper flake-profile from numbered links and clean up
create_flake_profile() {
    local direnv_dir=".direnv"
    
    # Find all flake-profile-*-link files
    local profile_links=($(ls "$direnv_dir"/flake-profile-*-link 2>/dev/null))
    
    if [[ ${#profile_links[@]} -eq 0 ]]; then
        echo "No flake-profile links found to process"
        return 0
    fi
    
    # Use the most recent one (by timestamp)
    local latest_link=$(ls -t "$direnv_dir"/flake-profile-*-link 2>/dev/null | head -n1)
    
    if [[ -n "$latest_link" && -L "$latest_link" ]]; then
        local target=$(readlink "$latest_link")
        echo "Processing latest profile link: $(basename "$latest_link") -> $target"
        
        # Remove existing flake-profile
        rm -f "$direnv_dir/flake-profile"
        
        if [[ "$target" == /nix/store/* ]]; then
            echo "Creating local copy to avoid cross-filesystem symlink"
            
            # Create local copy
            rm -rf "$direnv_dir/local-profile"
            if cp -r "$target" "$direnv_dir/local-profile"; then
                ln -sf "local-profile" "$direnv_dir/flake-profile"
                echo "Created: flake-profile -> local-profile (local copy)"
                
                # Clean up all numbered profile links
                echo "Cleaning up numbered profile links..."
                for link in "${profile_links[@]}"; do
                    if [[ -L "$link" ]]; then
                        echo "  Removing: $(basename "$link")"
                        rm "$link"
                    fi
                done
                echo "Cross-filesystem symlink issue resolved"
            else
                echo "Failed to create local copy, keeping original numbered links"
            fi
        else
            # Direct symlink if not cross-filesystem
            ln -sf "$target" "$direnv_dir/flake-profile"
            echo "Created: flake-profile -> $target (direct)"
            
            # Still remove numbered links since we have the main one
            echo "Cleaning up numbered profile links..."
            for link in "${profile_links[@]}"; do
                echo "  Removing: $(basename "$link")"
                rm "$link"
            done
        fi
    fi
    
    # Show final state
    if [[ -L "$direnv_dir/flake-profile" ]]; then
        local final_target=$(readlink "$direnv_dir/flake-profile")
        echo "Final result: flake-profile -> $final_target"
    fi
}

create_flake_profile

# Load environment variables from .env.local if it exists
dotenv_if_exists .env.local

# Add node_modules/.bin to PATH for npm scripts
PATH_add node_modules/.bin

# Add custom development scripts to PATH
PATH_add ./.nix/bin

# Set up development environment
export NODE_ENV=development

# PostgreSQL configuration
export PGDATA="$PWD/.postgres"
export PGHOST="localhost"
export PGPORT="5432"
export PGDATABASE="development"
export PGUSER="development"

# Playwright configuration
export PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

# Next.js configuration
export TURBOPACK=1

# macOS-specific optimizations
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
export FORCE_COLOR=1
export TERM=xterm-256color

# Node.js memory optimization for macOS
export NODE_OPTIONS="--max-old-space-size=4096"

# Increase file descriptor limit (common issue on macOS)
ulimit -n 65536 2>/dev/null || true

# Development helpers
export DEV_SETUP_COMPLETE="${PWD}/.dev-setup-complete"

# macOS notification function
notify_mac() {
    if command -v terminal-notifier &> /dev/null; then
        terminal-notifier -title "Dev Environment" -message "$1"
    fi
}

# Auto-setup on first entry
if [[ ! -f "$DEV_SETUP_COMPLETE" && -f "package.json" ]]; then
    echo "🍎 macOS development environment detected..."
    echo "🔧 Run 'dev-setup' to initialize your development environment"
    notify_mac "Development environment ready to setup!"
fi
